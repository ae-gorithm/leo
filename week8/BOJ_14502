package src.BOJ_14502;


import java.awt.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.util.List;

public class BOJ_14502 {
    static int safeArea = 0;
    static int initZero = 0;
    static int[] dr = {-1, 1, 0, 0};
    static int[] dc = {0, 0, -1, 1};

    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(in.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());

        int[][] map = new int[N][M];
        List<Point> virusList = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(in.readLine());
            for (int j = 0; j < M; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
                if (map[i][j] == 2) {
                    virusList.add(new Point(i, j));
                }
                else if(map[i][j] == 0){
                    initZero++;
                }
            }
        }

        for (int i = 0; i < N * M; i++) {
            for (int j = i + 1; j < N * M; j++) {
                for (int k = j + 1; k < N * M; k++) {
                    if (!makeWall(i, j, k, map)) {
                        continue;
                    }

                    // do bfs
                    pandemic(map, virusList);

                    // backtracking
                    destroyWall(i, j, k, map);
                }
            }
        }

        System.out.println(safeArea);


    }

    private static void destroyWall(int wall1, int wall2, int wall3, int[][] map) {
        int x1 = wall1 / map[0].length;
        int y1 = wall1 % map[0].length;

        int x2 = wall2 / map[0].length;
        int y2 = wall2 % map[0].length;

        int x3 = wall3 / map[0].length;
        int y3 = wall3 % map[0].length;

        map[x1][y1] = 0;
        map[x2][y2] = 0;
        map[x3][y3] = 0;
    }

    private static void pandemic(int[][] map, List<Point> virusList) {
        int[][] mapClone = new int[map.length][map[0].length];
        for(int i = 0; i<map.length; i++){
            for(int j = 0; j<map[0].length; j++){
                mapClone[i][j] = map[i][j];
            }
        }

        Queue<Point> queue = new ArrayDeque<>(virusList);
        int infected = 0;

        while (!queue.isEmpty()) {
            Point cur = queue.poll();

            for (int d = 0; d < 4; d++) {
                int nr = cur.x + dr[d];
                int nc = cur.y + dc[d];

                if(nr < 0 || nc < 0 || nr >= map.length || nc >= map[0].length || mapClone[nr][nc] != 0)
                    continue;

                queue.add(new Point(nr,nc));
                mapClone[nr][nc] = 2;
                infected++;
            }
        }

        safeArea = Math.max(safeArea, initZero - infected - 3);
    }

    private static boolean makeWall(int wall1, int wall2, int wall3, int[][] map) {
        int x1 = wall1 / map[0].length;
        int y1 = wall1 % map[0].length;

        int x2 = wall2 / map[0].length;
        int y2 = wall2 % map[0].length;

        int x3 = wall3 / map[0].length;
        int y3 = wall3 % map[0].length;

        if (map[x1][y1] != 0 || map[x2][y2] != 0 || map[x3][y3] != 0)
            return false;

        map[x1][y1] = 1;
        map[x2][y2] = 1;
        map[x3][y3] = 1;
        return true;
    }
}
