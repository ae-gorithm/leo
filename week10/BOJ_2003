
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    static int N;
    static int M;
    static int[] arr;
    public static void main(String[] args) throws IOException {
        // Naive Brute Force : N^2
        // 왠지 분할정복이 가능할것도 같은데?
        // 투 포인터를 활용하면 O(N)
        getInput();
        solve();

    }

    private static void solve() {
        int[] prefixSum = new int[N];
        prefixSum[0] = arr[0];
        for(int i = 1; i<N; i++){
            prefixSum[i] = prefixSum[i-1] + arr[i];
        }

        // [left, right] 범위의 range sum을 탐색
        int left = -1;
        int right = 0;

        int cnt = 0;
        while(right < N && left < N){
            if(prefixSum[right] - (left == -1 ? 0 : prefixSum[left]) < M){
                right++;
            }
            else if(prefixSum[right] - (left == -1 ? 0 : prefixSum[left]) > M){
                left++;
            }
            else{
                cnt++;
                right++;
                left++;
            }
        }
        System.out.println(cnt);
    }



    private static void getInput() throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st= new StringTokenizer(in.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        arr = new int[N];
        st = new StringTokenizer(in.readLine());
        for(int i = 0; i<N; i++){
            arr[i] = Integer.parseInt(st.nextToken());
        }
    }
}
