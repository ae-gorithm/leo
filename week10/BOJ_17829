
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Collections;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
    static int N;
    static int[][] matrix;
    public static void main(String[] args) throws IOException {
        getInput();
        solve();
    }

    private static void solve() {
        while(N > 1) {
            matrix = pooling();
        }

        System.out.println(matrix[0][0]);
    }

    private static int[][] pooling() {
        N >>= 1;
        int[][] newMatrix = new int[N][N];
        for(int i = 0; i < N; i++){
            for(int j = 0; j<N; j++){
                PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
                pq.add(matrix[i*2][j*2]);
                pq.add(matrix[i*2+1][j*2]);
                pq.add(matrix[i*2][j*2+1]);
                pq.add(matrix[i*2+1][j*2+1]);
                pq.poll();

                newMatrix[i][j] = pq.poll();
            }
        }
        return newMatrix;
    }


    private static void getInput() throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(in.readLine());
        matrix = new int[N][N];
        for(int i = 0; i<N; i++){
            StringTokenizer st = new StringTokenizer(in.readLine());
            for(int j= 0 ; j<N; j++)
                matrix[i][j] = Integer.parseInt(st.nextToken());
        }
    }
}
