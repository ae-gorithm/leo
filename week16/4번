
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(in.readLine());

        // dpMax[i][j] : i,j의 위치의 최댓값
        // dpMax[i][j] = max(dpMax[i-1][j-1] + map[i-1][j-1], dpMax[i-1][j] + map[i-1][j], dpMax[i-1][j+1] + map[i-1][j+1])
        int[][] dpMax = new int[N + 1][3];
        int[][] dpMin = new int[N + 1][3];
        int[][] map = new int[N + 1][3];

        for (int i = 1; i <= N; i++) {
            StringTokenizer st = new StringTokenizer(in.readLine());
            map[i][0] = Integer.parseInt(st.nextToken());
            map[i][1] = Integer.parseInt(st.nextToken());
            map[i][2] = Integer.parseInt(st.nextToken());
        }

        for (int i = 1; i <= N; i++) {
            dpMax[i][0] = Math.max(dpMax[i - 1][0], dpMax[i - 1][1]) + map[i][0];
            dpMax[i][1] = Math.max(dpMax[i - 1][2], Math.max(dpMax[i - 1][0], dpMax[i - 1][1])) + map[i][1];
            dpMax[i][2] = Math.max(dpMax[i - 1][1], dpMax[i - 1][2]) + map[i][2];

            dpMin[i][0] = Math.min(dpMin[i - 1][0], dpMin[i - 1][1]) + map[i][0];
            dpMin[i][1] = Math.min(dpMin[i - 1][2], Math.min(dpMin[i - 1][0], dpMin[i - 1][1])) + map[i][1];
            dpMin[i][2] = Math.min(dpMin[i - 1][1], dpMin[i - 1][2]) + map[i][2];
        }

        System.out.println(Math.max(Math.max(dpMax[N][0], dpMax[N][1]), dpMax[N][2]) + " " +
                Math.min(Math.min(dpMin[N][0], dpMin[N][1]), dpMin[N][2]));
    }
}
